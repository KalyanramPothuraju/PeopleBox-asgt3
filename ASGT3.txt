
1. Database Design  and  2. Implement Constraints


-- Creating Customers Table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    address VARCHAR(255)
);

-- Creating Categories Table
CREATE TABLE Categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(50) NOT NULL,
    description TEXT
);

-- Creating Products Table
CREATE TABLE Products (
    product_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) CHECK (price >= 0) NOT NULL,
    stock INT CHECK (stock >= 0) NOT NULL,
    category_id INT,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

-- Creating Orders Table
CREATE TABLE Orders (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2) CHECK (total_amount >= 0),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Creating Order_Items Table
CREATE TABLE Order_Items (
    order_item_id INT PRIMARY KEY AUTO_INCREMENT,
    order_id INT,
    product_id INT,
    quantity INT CHECK (quantity > 0),
    price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);





3. Data Population 
  ---------Data Insertion---------


-- Inserting Categories Data
INSERT INTO Categories (category_name, description)
VALUES 
    ('Laptops', 'Various brands and models of laptops'),
    ('Smartphones', 'Smartphones from different manufacturers'),
    ('Headphones', 'Wired and wireless headphones'),
    ('Cameras', 'Digital cameras and accessories'),
    ('Accessories', 'Mobile accessories, chargers, etc.');

-- Inserting Products Data
INSERT INTO Products (name, description, price, stock, category_id)
VALUES 
    ('Dell Inspiron 15', '15-inch laptop with Intel i5 processor', 599.99, 20, 1),
    ('HP Spectre x360', 'Convertible laptop with Intel i7 processor', 1199.99, 15, 1),
    ('iPhone 13', '128GB storage, A15 Bionic chip', 799.99, 30, 2),
    ('Samsung Galaxy S21', '5G Smartphone, 128GB storage', 799.99, 25, 2),
    ('Sony WH-1000XM4', 'Noise-cancelling over-ear headphones', 349.99, 50, 3),
    ('Bose QuietComfort 35', 'Noise-cancelling over-ear headphones', 299.99, 40, 3),
    ('Canon EOS Rebel T7', '24.1 MP DSLR camera', 499.99, 10, 4),
    ('Nikon D3500', 'DSLR camera with 18-55mm lens', 449.99, 15, 4),
    ('Anker PowerCore 10000', 'Portable charger with 10000mAh capacity', 25.99, 100, 5),
    ('OtterBox Defender', 'Protective case for iPhone 13', 49.99, 50, 5);

-- Inserting Customers Data
INSERT INTO Customers (first_name, last_name, email, phone, address)
VALUES 
    ('John', 'Doe', 'john.doe@example.com', '555-0101', '123 Elm Street'),
    ('Jane', 'Smith', 'jane.smith@example.com', '555-0102', '456 Oak Avenue'),
    ('Michael', 'Johnson', 'michael.johnson@example.com', '555-0103', '789 Pine Blvd'),
    ('Emily', 'Davis', 'emily.davis@example.com', '555-0104', '101 Maple Rd'),
    ('David', 'Brown', 'david.brown@example.com', '555-0105', '202 Birch St'),
    ('Sophia', 'Wilson', 'sophia.wilson@example.com', '555-0106', '303 Cedar Dr'),
    ('William', 'Taylor', 'william.taylor@example.com', '555-0107', '404 Elm Rd'),
    ('Olivia', 'Martinez', 'olivia.martinez@example.com', '555-0108', '505 Pine St');

-- Inserting Orders Data
INSERT INTO Orders (customer_id, total_amount)
VALUES 
    (1, 1599.98), 
    (2, 1049.98), 
    (3, 799.99), 
    (4, 1499.98), 
    (5, 899.99),
    (6, 749.99), 
    (7, 1349.98), 
    (8, 1099.98), 
    (1, 349.99), 
    (2, 799.99),
    (3, 449.99), 
    (4, 599.99);

-- Inserting Order_Items Data
INSERT INTO Order_Items (order_id, product_id, quantity, price)
VALUES 
    (1, 1, 2, 599.99),  -- John Doe ordered 2 Dell Inspiron 15
    (1, 2, 1, 1199.99), -- John Doe ordered 1 HP Spectre x360
    (2, 3, 1, 799.99),  -- Jane Smith ordered 1 iPhone 13
    (2, 4, 1, 799.99),  -- Jane Smith ordered 1 Samsung Galaxy S21
    (3, 5, 1, 349.99),  -- Michael Johnson ordered 1 Sony WH-1000XM4
    (4, 7, 2, 499.99),  -- Emily Davis ordered 2 Canon EOS Rebel T7
    (5, 8, 1, 449.99),  -- David Brown ordered 1 Nikon D3500
    (6, 9, 1, 25.99),   -- Sophia Wilson ordered 1 Anker PowerCore 10000
    (7, 10, 2, 49.99),  -- William Taylor ordered 2 OtterBox Defender
    (8, 2, 1, 1199.99), -- Olivia Martinez ordered 1 HP Spectre x360
    (9, 6, 1, 299.99),  -- John Doe ordered 1 Bose QuietComfort 35
    (10, 3, 1, 799.99); -- Jane Smith ordered 1 iPhone 13


4. Write Queries
a. Find Top 3 Customers by Order Value

SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_spent
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY total_spent DESC
LIMIT 3;


b. List Products with Low Stock (Below 10)
sql
Copy code
SELECT p.name, p.stock
FROM Products p
WHERE p.stock < 10;
c. Calculate Revenue by Category
sql
Copy code
SELECT cat.category_name, SUM(oi.quantity * oi.price) AS revenue
FROM Order_Items oi
JOIN Products p ON oi.product_id = p.product_id
JOIN Categories cat ON p.category_id = cat.category_id
GROUP BY cat.category_name;
d. Show Orders with Their Items and Total Amount
sql
Copy code
SELECT o.order_id, o.order_date, oi.product_id, p.name AS product_name, oi.quantity, oi.price, 
       (oi.quantity * oi.price) AS total_item_amount, o.total_amount
FROM Orders o
JOIN Order_Items oi ON o.order_id = oi.order_id
JOIN Products p ON oi.product_id = p.product_id
ORDER BY o.order_id;
5. Advanced Tasks
a. Create View: order_summary
 

CREATE VIEW order_summary AS
SELECT
    o.order_id,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    COUNT(DISTINCT oi.product_id) AS unique_products_count,
    SUM(oi.quantity) AS total_quantity,
    SUM(oi.quantity * p.price) AS total_order_amount,
    o.order_date
FROM
    orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
JOIN products p ON oi.product_id = p.product_id
GROUP BY
    o.order_id, c.first_name, c.last_name, o.order_date;

